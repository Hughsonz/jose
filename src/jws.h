/* vim: set tabstop=8 shiftwidth=4 softtabstop=4 expandtab smarttab colorcolumn=80: */

#pragma once

#include <jansson.h>
#include <openssl/evp.h>

#include <stdbool.h>

/**
 * Converts a JWS from compact format into JSON format.
 */
json_t * __attribute__((warn_unused_result))
jose_jws_from_compact(const char *jws);

/**
 * Converts a JWS from JSON format into compact format.
 *
 * If more than one signature exists or if an unprotected header is found,
 * this operation will fail.
 *
 * Free with free().
 */
char * __attribute__((warn_unused_result))
jose_jws_to_compact(const json_t *jws);

/**
 * Signs a JWS with the specified EVP_PKEY.
 *
 * The specified JWS must have at least the "payload" attribute. It may have
 * existing signatures.
 *
 * Both the JOSE Unprotected Header (head) and the JOSE Protected Header (prot)
 * are optional.
 *
 * This function determines the signing algorithm following this precedence:
 *   1. The "alg" attribute in the JOSE Protected Header (prot)
 *   2. The "alg" attribute in the JOSE Unprotected Header (head)
 *   3. An algorithm is automatically selected by the key parameters. In this
 *      case the "alg" attribute of the JOSE Protected Header is set to the
 *      selected algorithm. If prot is NULL, the JOSE Unprotected Header (head)
 *      will be used instead. If this is also NULL, a JOSE Protected Header
 *      containing only the "alg" attribute will be created internally.
 *
 * If the signing process fails, the state of the JWS is undefined. It should
 * not be used.
 */
bool __attribute__((warn_unused_result))
jose_jws_sign(json_t *jws, const json_t *head, const json_t *prot,
              EVP_PKEY *key);

/**
 * Signs a JWS with the specified JSON Web Key(s).
 *
 * The specified JWS must have at least the "payload" attribute. It may have
 * existing signatures.
 *
 * Both the JOSE Unprotected Header (head) and the JOSE Protected Header (prot)
 * are optional.
 *
 * This function determines the signing algorithm following this precedence:
 *   1. The "alg" attribute in the JOSE Protected Header (prot)
 *   2. The "alg" attribute in the JOSE Unprotected Header (head)
 *   3. The "alg" attribute in the JWK
 *   4. An algorithm is automatically selected by the key parameters. In this
 *      case the "alg" attribute of the JOSE Protected Header is set to the
 *      selected algorithm. If prot is NULL, the JOSE Unprotected Header (head)
 *      will be used instead. If this is also NULL, a JOSE Protected Header
 *      containing only the "alg" attribute will be created internally.
 *
 * The jwks parameter may be one of the following:
 *   1. A JSON Web Key
 *   2. A JSON Web Key Set
 *   3. An array of JSON Web Keys
 *
 * When multiple keys are specified, a separate signature will be created for
 * each key.
 *
 * Some header attributes may be autogenerated. For details, see the flags.
 *
 * If the signing process fails, the state of the JWS is undefined. It should
 * not be used.
 */
bool __attribute__((warn_unused_result))
jose_jws_sign_jwk(json_t *jws, const json_t *head, const json_t *prot,
                  const json_t *jwks, const char *flags);

/**
 * Validates a JWS using the specified EVP_PKEY.
 */
bool __attribute__((warn_unused_result))
jose_jws_verify(const json_t *jws, EVP_PKEY *key);

/**
 * Validates a JWS using the specified JSON Web Key(s).
 *
 * The jwks parameter may be one of the following:
 *   1. A JSON Web Key
 *   2. A JSON Web Key Set
 *   3. An array of JSON Web Keys
 *
 * If the all parameter is true, a valid signature must exist for all keys.
 * Otherwise, if a valid signature exists for any key, verification succeeds.
 */
bool __attribute__((warn_unused_result))
jose_jws_verify_jwk(const json_t *jws, const json_t *jwks, bool all);
